/*
 * This file is generated by jOOQ.
 */
package ru.disarra.todo.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.disarra.todo.jooq.tables.TaskStatus;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskStatusRecord extends UpdatableRecordImpl<TaskStatusRecord> implements Record3<Long, Long, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.task_status.task_id</code>.
     */
    public TaskStatusRecord setTaskId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.task_status.task_id</code>.
     */
    public Long getTaskId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.task_status.user_id</code>.
     */
    public TaskStatusRecord setUserId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.task_status.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.task_status.done</code>.
     */
    public TaskStatusRecord setDone(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.task_status.done</code>.
     */
    public Boolean getDone() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TaskStatus.TASK_STATUS.TASK_ID;
    }

    @Override
    public Field<Long> field2() {
        return TaskStatus.TASK_STATUS.USER_ID;
    }

    @Override
    public Field<Boolean> field3() {
        return TaskStatus.TASK_STATUS.DONE;
    }

    @Override
    public Long component1() {
        return getTaskId();
    }

    @Override
    public Long component2() {
        return getUserId();
    }

    @Override
    public Boolean component3() {
        return getDone();
    }

    @Override
    public Long value1() {
        return getTaskId();
    }

    @Override
    public Long value2() {
        return getUserId();
    }

    @Override
    public Boolean value3() {
        return getDone();
    }

    @Override
    public TaskStatusRecord value1(Long value) {
        setTaskId(value);
        return this;
    }

    @Override
    public TaskStatusRecord value2(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public TaskStatusRecord value3(Boolean value) {
        setDone(value);
        return this;
    }

    @Override
    public TaskStatusRecord values(Long value1, Long value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskStatusRecord
     */
    public TaskStatusRecord() {
        super(TaskStatus.TASK_STATUS);
    }

    /**
     * Create a detached, initialised TaskStatusRecord
     */
    public TaskStatusRecord(Long taskId, Long userId, Boolean done) {
        super(TaskStatus.TASK_STATUS);

        setTaskId(taskId);
        setUserId(userId);
        setDone(done);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TaskStatusRecord
     */
    public TaskStatusRecord(ru.disarra.todo.jooq.tables.pojos.TaskStatus value) {
        super(TaskStatus.TASK_STATUS);

        if (value != null) {
            setTaskId(value.getTaskId());
            setUserId(value.getUserId());
            setDone(value.getDone());
            resetChangedOnNotNull();
        }
    }
}
